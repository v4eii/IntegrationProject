<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="xslt/input_map_req_2.map" md5sum="6ebedc2f479b10c54dd399c93e14c692" version="8.0.500" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM Graphical Data Mapping Editor.
*   Version 8.0.5.0
*
*   Mapping file:		input_map_req_2.map
*   Map declaration(s):	input_map_req_2
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FSecondModule%252FBP2Interface%257Doperation1RequestMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252FFirstModule%252FCalculateInterface%257DsumRequestMsg/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:str="http://exslt.org/strings"
    xmlns:exsl="http://exslt.org/common"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:xs4xs="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:in="http://SecondModule/BP2Interface"
    xmlns:io="http://www.w3.org/2005/08/addressing"
    xmlns:io3="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:in2="wsdl.http://SecondModule/BP2Interface"
    xmlns:io2="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:io4="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out2="wsdl.http://FirstModule/CalculateInterface"
    xmlns:out="http://FirstModule/CalculateInterface"
    xmlns:MapUtils="xalan://com.ibm.wbiserver.transform.util.MapUtils"
    xmlns:map="http://SecondModule/xslt/input_map_req_2"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="date str exsl set math MapUtils map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <xsl:element name="dataObject">
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out2:sumRequestMsg'"/>
            </xsl:attribute>
            <xsl:call-template name="map:input_map_req_22">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </xsl:element>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:input_map_req_2"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:input_map_req_2">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out2:sumRequestMsg'"/>
      </xsl:attribute>
      <out:sum>
        <!-- a simple data mapping: "in:operation1/input1"(string) to "value1"(int) -->
        <xsl:choose>
          <xsl:when test="normalize-space(in:operation1/input1)">
            <xsl:element name="value1">
              <!-- variables for custom code -->
              <xsl:variable name="input1" select="in:operation1/input1"/>
              <xsl:value-of select="MapUtils:stringToInt($input1, '0')"/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <value1 xsi:nil="true"/>
          </xsl:otherwise>
        </xsl:choose>
        <!-- a simple data mapping: "in:operation1/input2"(string) to "value2"(int) -->
        <xsl:choose>
          <xsl:when test="normalize-space(in:operation1/input2)">
            <xsl:element name="value2">
              <!-- variables for custom code -->
              <xsl:variable name="input2" select="in:operation1/input2"/>
              <xsl:value-of select="MapUtils:stringToInt($input2, '0')"/>
            </xsl:element>
          </xsl:when>
          <xsl:otherwise>
            <value2 xsi:nil="true"/>
          </xsl:otherwise>
        </xsl:choose>
      </out:sum>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:input_map_req_22">
    <xsl:param name="body"/>
    <out:sum>
      <!-- a simple data mapping: "$body/in:operation1/input1"(string) to "value1"(int) -->
      <xsl:choose>
        <xsl:when test="normalize-space($body/in:operation1/input1)">
          <xsl:element name="value1">
            <!-- variables for custom code -->
            <xsl:variable name="input1" select="$body/in:operation1/input1"/>
            <xsl:value-of select="MapUtils:stringToInt($input1, '0')"/>
          </xsl:element>
        </xsl:when>
        <xsl:otherwise>
          <value1 xsi:nil="true"/>
        </xsl:otherwise>
      </xsl:choose>
      <!-- a simple data mapping: "$body/in:operation1/input2"(string) to "value2"(int) -->
      <xsl:choose>
        <xsl:when test="normalize-space($body/in:operation1/input2)">
          <xsl:element name="value2">
            <!-- variables for custom code -->
            <xsl:variable name="input2" select="$body/in:operation1/input2"/>
            <xsl:value-of select="MapUtils:stringToInt($input2, '0')"/>
          </xsl:element>
        </xsl:when>
        <xsl:otherwise>
          <value2 xsi:nil="true"/>
        </xsl:otherwise>
      </xsl:choose>
    </out:sum>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*[not(name() = '')]">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>
